NAIVE-
using stack
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
          stack<int> s;
        for(int i=0;i<tokens.size();i++){
            if(tokens[i]=="+" || tokens[i]=="-" || tokens[i]=="*" || tokens[i]=="/"){
                //this thing is a life saver int64_t
                int64_t a = s.top();
                s.pop();
                int64_t b = s.top();
                s.pop();
                int res;
                if(tokens[i] == "+"){
                    s.push(a+b);
                }
                else if(tokens[i] == "-"){
                    s.push(b-a);
                }
                else if(tokens[i] == "*"){
                    long long int x=a*b;
                    int val=x;
                    s.push(x);
                }
                else if(tokens[i] == "/"){
                    s.push(b/a);
                }
            }
            else
                s.push(stoi(tokens[i]));
        }
        return s.top();

        
      /*  
    stack<int>ans;
        for(int i=0;i<t.size();i++){
            if(t[i]=="+" or t[i]=="-" or t[i]=="*" or t[i]=="/"){
                int b=ans.top();
                ans.pop();
                int a=ans.top();
                ans.pop();
                int num;
            if(t[i]=="+")num=a+b;
            else if(t[i]=="/")num=a/b;
            else if(t[i]=="-")num=a-b;
            else {
                num=a*b;
            }
            ans.push(num);
                }
            
            else{
                ans.push(stoi(t[i]));
            }
        }
        return ans.top();
       */
    }
};
///////////////////////////////////
int evalRPN(vector<string>& tokens) {
        string s = tokens.back(); tokens.pop_back();
        if(s != "+" && s != "-" && s != "*" && s != "/") return stoi(s);
        
        int r2 = evalRPN(tokens), r1 = evalRPN(tokens);
        
        if(s == "+") return r1 + r2;
        if(s == "-") return r1 - r2;
        if(s == "*") return r1 * r2;
        if(s == "/") return r1 / r2;
    }
-------------------
int evalRPN(vector<string>& tokens) {
	int n = size(tokens) - 1;
	return solve(tokens, n);
}
int solve(vector<string>& t, int &i) {
	if(t[i] == "+" || t[i] == "-" || t[i] == "*" || t[i] == "/") {
		char Operator = t[i][0];
		int op1 = solve(t, --i), op2 = solve(t, --i);            
		if(Operator == '+') return op2 + op1;
		if(Operator == '-') return op2 - op1;
		if(Operator == '/') return op2 / op1;
		if(Operator == '*') return op2 * op1;
	}
	return stoi(t[i]);        
}
---------------------
one can use vector and modifying it in itself,meaning using the string vector given in the program
//means constant extra space used in it
