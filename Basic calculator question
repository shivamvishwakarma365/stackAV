class Solution {
public:
    int prec(char a){
        if(a=='^'){
            return 3;
        }else if(a=='/' || a=='*'){
            return 2;
        }else if(a=='+' || a=='-'){
            return 1;
        }
        return 0;
    }
    
bool isop(char a){
        if(a=='+' || a=='-' || a=='*' || a=='^' || a=='/' || a=='(' || a==')')return true;
        return false;
    }
    
    string read(string a){
         string infix="";
    int i=0;
    while(i<a.size()){
        if(a[i]==' '){
            i++;
        }else if(a[i]=='(' || a[i]==')' ||a[i]=='+' ||a[i]=='-' ||a[i]=='*' ||a[i]=='/'){
            if(a[i]=='-'){//unary handling as per the conditions given
                if(i==0 || (a[i-1]=='(' && i-1>=0) ){
                    infix+='0';
                }
            }
            infix+=a[i];
            i++;
        }else{
            string val="";//the number droplets
            while(i<a.size() && isdigit(a[i])){
                val+=a[i];
                i++;
            }
            infix+=val;
        }
    }
    return infix;
    }
    //infix to postfix
    string infixToPostfix(string s) {
        stack<char> st;
        string res="";
      for(int i=0;i<s.size();i++){
            if(!isop(s[i])){
                res+=s[i];
            }else if(s[i]=='('){
                st.push(s[i]);
            }else if(s[i]==')'){
                while(!st.empty() && st.top()!='('){
                    res+=st.top();
                    st.pop();
                }
                st.pop();
            }else{
                while(st.size()!=0 && prec(st.top())>=prec(s[i])){
                    res+=st.top();
                    st.pop();
                }
                st.push(s[i]);
            }
            
        }
        while(!st.empty()){
            res+=st.top();
            st.pop();
        }
        return res;
    }
    //finally calculating the answer from postfix
    int answer(string arr){
    int m=arr.size();
    stack<int>ans;
    for(int i=0;i<m;i++){
        char val=arr[i];
        if(val=='+'||val=='/'||val=='-'||val=='*'){
            int b=ans.top();
            ans.pop();
            int a=ans.top();
            ans.pop();
          
            if(val=='+')ans.push(a+b);
            else if(val=='/')ans.push(a/b);
            else if(val=='-')ans.push(a-b);
            else {
                ans.push(a*b);
            }
        
        }else{
            int p=arr[i]-'0';
            ans.push(p);
        }
        
    }
        if(ans.size()>1){
            int yay=stoi(arr);
            return yay;
        }
    return ans.top();
}
    int calculate(string sentence) {
       
        string name=read(sentence);
    name=infixToPostfix(name);
    int ans=answer(name);
  
        return ans;
    }
};class Solution {
public:
    int prec(char a){
        if(a=='^'){
            return 3;
        }else if(a=='/' || a=='*'){
            return 2;
        }else if(a=='+' || a=='-'){
            return 1;
        }
        return 0;
    }
    
bool isop(char a){
        if(a=='+' || a=='-' || a=='*' || a=='^' || a=='/' || a=='(' || a==')')return true;
        return false;
    }
    
    string read(string a){
         string infix="";
    int i=0;
    while(i<a.size()){
        if(a[i]==' '){
            i++;
        }else if(a[i]=='(' || a[i]==')' ||a[i]=='+' ||a[i]=='-' ||a[i]=='*' ||a[i]=='/'){
            if(a[i]=='-'){//unary handling as per the conditions given
                if(i==0 || (a[i-1]=='(' && i-1>=0) ){
                    infix+='0';
                }
            }
            infix+=a[i];
            i++;
        }else{
            string val="";//the number droplets
            while(i<a.size() && isdigit(a[i])){
                val+=a[i];
                i++;
            }
            infix+=val;
        }
    }
    return infix;
    }
    //infix to postfix
    string infixToPostfix(string s) {
        stack<char> st;
        string res="";
      for(int i=0;i<s.size();i++){
            if(!isop(s[i])){
                res+=s[i];
            }else if(s[i]=='('){
                st.push(s[i]);
            }else if(s[i]==')'){
                while(!st.empty() && st.top()!='('){
                    res+=st.top();
                    st.pop();
                }
                st.pop();
            }else{
                while(st.size()!=0 && prec(st.top())>=prec(s[i])){
                    res+=st.top();
                    st.pop();
                }
                st.push(s[i]);
            }
            
        }
        while(!st.empty()){
            res+=st.top();
            st.pop();
        }
        return res;
    }
    //finally calculating the answer from postfix
    int answer(string arr){
    int m=arr.size();
    stack<int>ans;
    for(int i=0;i<m;i++){
        char val=arr[i];
        if(val=='+'||val=='/'||val=='-'||val=='*'){
            int b=ans.top();
            ans.pop();
            int a=ans.top();
            ans.pop();
          
            if(val=='+')ans.push(a+b);
            else if(val=='/')ans.push(a/b);
            else if(val=='-')ans.push(a-b);
            else {
                ans.push(a*b);
            }
        
        }else{
            int p=arr[i]-'0';
            ans.push(p);
        }
        
    }
        if(ans.size()>1){
            int yay=stoi(arr);
            return yay;
        }
    return ans.top();
}
    int calculate(string sentence) {
       
        string name=read(sentence);
    name=infixToPostfix(name);
    int ans=answer(name);
  
        return ans;
    }
};
